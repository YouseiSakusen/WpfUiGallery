<metro:MetroWindow x:Class="MetroWindowAndControls.MainWindow"
				   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
				   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
				   xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
				   xmlns:bh="http://schemas.microsoft.com/xaml/behaviors"
				   xmlns:prism="http://prismlibrary.com/"
				   xmlns:livet="http://schemas.livet-mvvm.net/2011/wpf"
				   xmlns:rp="clr-namespace:Reactive.Bindings.Interactivity;assembly=ReactiveProperty.NETCore"
				   xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
				   xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
				   xmlns:vmBase="clr-namespace:HalationGhost.WinApps;assembly=HalationGhostWpfViewModels"
				   xmlns:mns="clr-namespace:MetroWindowAndControls.Menus"
				   prism:ViewModelLocator.AutoWireViewModel="True"
				   Title="{Binding Title}"
				   Height="600" Width="800"
				   WindowStartupLocation="CenterScreen"
				   GlowBrush="Black"
				   BorderThickness="0"
				   Icon="sample-app.ico"
				   TitleCharacterCasing="{Binding TitleCharacterCasing.Value, Mode=OneWay}"
				   IgnoreTaskbarOnMaximize="{Binding IgnoreTaskbarOnMaximize.Value, Mode=OneWay}"
				   IsCloseButtonEnabled="{Binding IsCloseButtonEnabled.Value, Mode=OneWay}"
				   IsMaxRestoreButtonEnabled="{Binding IsMaxRestoreButtonEnabled.Value, Mode=OneWay}"
				   IsMinButtonEnabled="{Binding IsMinButtonEnabled.Value, Mode=OneWay}"
				   IsWindowDraggable="{Binding IsWindowDraggable.Value, Mode=OneWay}"
				   ShowCloseButton="{Binding ShowCloseButton.Value, Mode=OneWay}"
				   ShowMaxRestoreButton="{Binding ShowMaxRestoreButton.Value, Mode=OneWay}"
				   ShowMinButton="{Binding ShowMinButton.Value, Mode=OneWay}"
				   ShowSystemMenuOnRightClick="{Binding ShowSystemMenuOnRightClick.Value, Mode=OneWay}"
				   ShowTitleBar="{Binding ShowTitleBar.Value, Mode=OneWay}"
				   TitleAlignment="{Binding TitleAlignment.Value, Mode=OneWay}"
				   TitleCaps="{Binding TitleCaps.Value, Mode=OneWay}"
				   WindowTransitionsEnabled="{Binding WindowTransitionsEnabled.Value, Mode=OneWay}"
				   ShowIconOnTitleBar="{Binding ShowIconOnTitleBar.Value, Mode=OneWay}">
	<bh:Interaction.Behaviors>
		<vmBase:WindowClosingBehavior CanClose="{Binding CanClose.Value, Mode=OneWay}" />
		<vmBase:SystemMenuBehavior IsVisible="{Binding IsSystemMenuVisible.Value, Mode=OneWay}" />
	</bh:Interaction.Behaviors>
	<bh:Interaction.Triggers>
		<bh:EventTrigger EventName="ContentRendered">
			<rp:EventToReactiveCommand Command="{Binding ContentRendered}" />
		</bh:EventTrigger>
		<bh:EventTrigger EventName="Closed">
			<livet:DataContextDisposeAction />
		</bh:EventTrigger>
	</bh:Interaction.Triggers>
	<Window.Resources>
		<DataTemplate x:Key="MenuData" DataType="{x:Type mns:MetroWindowAndControlsViewModel}">
			<StackPanel Orientation="Horizontal"
						IsEnabled="{Binding IsEnabled.Value, Mode=TwoWay}">
				<iconPacks:PackIconControl Kind="{Binding IconKind.Value}"
										   Margin="8, 10, 30, 10"
										   Focusable="False"
										   Width="32" Height="32" />
				<TextBlock Text="{Binding MenuText.Value}"
						   VerticalAlignment="Center"
						   Style="{StaticResource MaterialDesignHeadline6TextBlock}" />
			</StackPanel>
		</DataTemplate>
	</Window.Resources>
	<metro:MetroWindow.RightWindowCommands>
		<metro:WindowCommands>
			<Button Content="{iconPacks:FontAwesome Kind=HomeSolid, Width=24, Height=24}"
					Command="{Binding HomeCommand}"
					ToolTip="StartUp Viewを表示"/>
		</metro:WindowCommands>
	</metro:MetroWindow.RightWindowCommands>
	<metro:HamburgerMenu Grid.Column="0"
						 ItemTemplate="{StaticResource MenuData}"
						 OptionsItemTemplate="{StaticResource MenuData}"
						 ItemsSource="{Binding MenuItems, Mode=OneTime}"
						 OptionsItemsSource="{Binding OptionMenuItems, Mode=OneTime}"
						 PaneBackground="{StaticResource MaterialDesignDarkBackground}"
						 OpenPaneLength="300"
						 DisplayMode="{Binding HamburgerMenuDisplayMode.Value, Mode=OneWay}"
						 IsPaneOpen="{Binding IsHamburgerMenuPanelOpened.Value, Mode=TwoWay}"
						 SelectedItem="{Binding SelectedMenu.Value, Mode=TwoWay}"
						 SelectedIndex="{Binding SelectedMenuIndex.Value, Mode=TwoWay}"
						 SelectedOptionsItem="{Binding SelectedOption.Value, Mode=TwoWay}"
						 SelectedOptionsIndex="{Binding SelectedOptionIndex.Value, Mode=TwoWay}">
		<metro:HamburgerMenu.Content>
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="48"/>
					<RowDefinition/>
				</Grid.RowDefinitions>
				<md:ColorZone Mode="Dark" Padding="10">
					<TextBlock Text="MahApps.Metro サンプル"
							   HorizontalAlignment="Center"
							   Style="{StaticResource MaterialDesignHeadline6TextBlock}" />
				</md:ColorZone>
				<metro:TransitioningContentControl x:Name="ContentRegion"
												   Grid.Row="1"
												   prism:RegionManager.RegionName="ContentRegion"
												   Transition="{Binding ContentControlTransition.Value}"/>
			</Grid>
		</metro:HamburgerMenu.Content>
	</metro:HamburgerMenu>
</metro:MetroWindow>
